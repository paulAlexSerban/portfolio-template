@use "sass:map";
/// Output the CSS required for all the columns in a given grid system.
/// @param {Map} $breakpoints [$breakpoints] - The breakpoints in the grid system
/// @param {Number} $gutter [$rid-gutter] - The gutter for the grid system
/// @access private

@mixin make-grid-columns($breakpoints: $breakpoints, $gutter: $grid-gutter) {
  .col {
    @include make-col-ready($gutter);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint);
    $columns: map.get(map.get($breakpoints, $breakpoint), columns);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 0 through $columns {
      .col#{$infix}-#{$i} {
        @include make-col-ready($gutter);
      }
    }

    .col#{$infix},
    .col#{$infix}--auto {
      @include make-col-ready($gutter);
    }

    @include breakpoint($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col,
      .col#{$infix} {
        max-width: 100%;
        flex-basis: 0;
        flex-grow: 1;
      }

      .col--auto,
      .col#{$infix}--auto {
        width: auto;
        // Reset earlier grid tiers
        max-width: 100%;
        flex: 1 0 0%;
      }

      @for $i from 0 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @for $i from 0 through ($columns - 1) {
        @if not($infix == "") {
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}
